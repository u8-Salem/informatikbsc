--- !inherit 02_base.test

--- !yaml
requirements: [CRAWL] #global requirement for all this testcases

--- !python compile crawl and prepare folder
exe = Compilation().compile()

import tempfile
import subprocess
def prepare_folder():
    global tempdir
    if globals().get('tempdir'):
        return tempdir
    osp= os.path
    j = osp.join
    t = j(exe.tmpdir, "__testdir")
    os.mkdir(t)
    print(t)
    tempdir = t
    l1 = 'printf("\tOption %s has value %s\n", "a", getValueForOption("a"));\n'
    l2 = '	printf("Command: %s\n", getCommand());'
    l3 = 'int main(int argc, char* argv[]) {'
    l4 = 'printf("\tOption %s has value %s\n", "d", pront getValueForOption("d"));\n'
    l5 = 'pr__uintf("\tOption %s has value %s\n", "d", pront getValueForOption("d"));\n'
    lines = [l1,l2,l3,l4,l5]

    with open(j(t, 'empty.file'), 'w') as f:
        pass
    with open(j(t, 'hello_world.c'), 'w') as f:
        f.writelines(lines)
        pass
    with open(j(t, 'hello_world.h'), 'w') as f:
        f.writelines(lines)
        f.writelines(lines)
        pass
    with open(j(t, 'big_hello_world.c'), 'w') as f:
        for i in range(50):
            f.writelines(lines)
        pass
    try:
        os.mkdir(j(t,'a'))
    except FileExistsError:
        pass
    try:
        os.mkdir(j(t,'a/b'))
    except FileExistsError:
        pass
    try:
        os.mkdir(j(t,'a/b/c'))
    except FileExistsError:
        pass
    try:
        os.mkdir(j(t,'a/b/c/d'))
    except FileExistsError:
        pass

    with open(j(tempdir,'a/b/c/d', 'hello_foo'), 'w') as f:
        f.writelines(lines)
        pass
    with open(j(t,'a/b/c/', 'big_hello_world.c'), 'w') as f:
        for i in range(51):
            f.writelines(lines)
        pass
    try:
        os.mkfifo(j(t,'fifo'))
    except:
        pass
    return tempdir

def print_comparison(args, actual_result):
    try:
        expected_result = subprocess.check_output(['/gbs/aufgaben/a3/crawl'] + args)
        logging.info("Deine Ausgabe:\n" + actual_result)
        logging.info("Musterausgabe:\n" + expected_result.decode())
    except:
        logging.info("Beispiel crawl unter /gbs/aufgaben/a3/crawl ist nicht verfügbar. "
                     "Führe diesen Test auf dem GBS Server aus, um deine Ausgabe mit der der Musterlösung zu vergleichen")
        pass

--- !python simple run without filters
args = ""
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 10:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 11 Zeilen für die 11 gefundenen Dateien ausgegeben werden.")

--- !python simple run without filters, single file as argument
args = "/hello_world.c"
f = prepare_folder()
args = str(f) + str(args)
args = args.split()
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 0:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 1 Zeile für die 1 gefundene Datei ausgegeben werden.")

--- !python simple run with several paths and one explicit given file
f = prepare_folder()
arg1 = (str(f) + "/hello_world.c").split()
arg2 = (str(f) + "/a/b/c").split()
arg3 = (str(f) + "/a/b").split()
args = arg1 + arg2 + arg3
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 9:
    print(result.strip().count('\n'))
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 10 Zeilen für die 10 gefundenen Dateien ausgegeben werden.")

--- !python maxdepth 0
args = "-maxdepth=0"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 0:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau eine Zeile für eine gefundene Datei ausgegeben werden.")

--- !python maxdepth 1
args = "-maxdepth=1"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 5:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 6 Zeilen für die 6 gefundenen Dateien ausgegeben werden.")

--- !python maxdepth 3
args = "-maxdepth=3"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 7:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 8 Zeilen für die 8 gefundenen Dateien ausgegeben werden.")

--- !python size smaller 1
exe.check_requirements(["SIZE"])
args = "-size=-1"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 0:
    print_comparison(args, result)
    raise RuntimeError("Es sollte hier genau einen Treffer geben")

--- !python size smaller 600
exe.check_requirements(["SIZE"])
args = "-size=-600"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if result.strip().count('\n') != 3:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 4 Zeilen für die 4 gefundenen Dateien ausgegeben werden.")

--- !python size bigger 800
exe.check_requirements(["SIZE"])
args = "-size=+800"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
result = result.strip()
if not result or result.count('\n') != 6:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 7 Zeilen für die 2 gefundenen Dateie und 5 Ordner ausgegeben werden.")


--- !python size equal 14100
exe.check_requirements(["SIZE"])
args = "-size=14100"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
result = result.strip()
if not result or result.count('\n') != 0:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 1 Zeilen für die 1 gefundenen Dateie ausgegeben werden.")


--- !python name
exe.check_requirements(["NAME"])
args = "-name=*.c"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
for line in result.strip().split('\n'):
    if not line.endswith(".c"):
        print_comparison(args, result)
        raise RuntimeError()

--- !python line
exe.check_requirements(["LINE"])
args = "-line=print"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
for line in result.strip().split('\n'):
    if not"print" in line:
        print_comparison(args, result)
        raise RuntimeError()

--- !python line uses extended regex
exe.check_requirements(["LINE"])
import re
p = re.compile('.*pr.+t.*')
args = "-line=pr.+t"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
for line in result.strip().split('\n'):
    if not p.match(line):
        print_comparison(args, result)
        raise RuntimeError()



--- !python type d
exe.check_requirements(["TYPE"])
f = prepare_folder()
args = '-type=d'
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
result = result.strip()
if not result or result.count('\n') != 4:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 5 Zeilen für die 5 gefundenen Verzeichnisse ausgegeben werden.")


--- !python type f
exe.check_requirements(["TYPE"])
f = prepare_folder()
args = '-type=f'
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
result = result.strip()
if not result or result.count('\n') != 5:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 6 Zeilen für die 6 gefundenen Dateien ausgegeben werden.")


--- !python maxdepth 0 & type combined
args = "-maxdepth=0 -type=d"
f = prepare_folder()
args = args.split()
args.insert(0,f)
result,_ = exe.run(args=args)
if not result.strip() or result.strip().count('\n') != 0:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 1 Zeilen für die 1 gefundenen Dateien ausgegeben werden.")


--- !python mehrere Pfade
f = prepare_folder()
args = [f, os.path.join(f,'a')]
result,_ = exe.run(args=args)
result = result.strip()
if not result or result.count('\n') != 16:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 17 Zeilen für die 17 gefundenen Objekte ausgegeben werden.")


--- !python correct information for links
f = prepare_folder()
args = []
args.append(f)

# lstat is now newfstatat
stdout, stderr, syscalls = exe.strace("newfstatat", args=args)

lstat = False
for line in syscalls:
	if "AT_SYMLINK_NOFOLLOW" in line:
		lstat = True
		break

# lstat syscall not found -> wrong one is used
if not lstat:
	raise RuntimeError("Es werden nicht die richtigen Informationen über Verknüpfungen ausgelesen")


--- !python all
exe.check_requirements(["NAME", "LINE", "SIZE", "TYPE"])
args = "-name=*.c -line=pr.+t -size=-4096 -type=f"
f = prepare_folder()
args = args.split()
args.insert(0,f)
args.insert(0,f+'/a/..')
result,_ = exe.run(args=args)
if not result or result.count('\n') != 12:
    print_comparison(args, result)
    raise RuntimeError("Es sollten genau 13 Zeilen für die 13 gefundenen Zeilen ausgegeben werden.")

